apiVersion: v1
kind: ConfigMap
metadata:
  name: "dfo-party-mariadb-init"
  labels:
    {{- include "mariadb.labels" . | nindent 4 }}
data:
  init.sql: |
    -- DFO Party Management Application Database Initialization
    -- 환경변수에서 데이터베이스 정보를 가져와서 사용
    
    -- 기본 데이터베이스 생성 (백엔드에서 사용)
    CREATE DATABASE IF NOT EXISTS dnfp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    -- 개발용 데이터베이스 생성
    CREATE DATABASE IF NOT EXISTS dnfp_dev CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    -- 운영용 데이터베이스 생성
    CREATE DATABASE IF NOT EXISTS dnfp_prod CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    -- 기본 데이터베이스 설정 (dnfp - 백엔드 기본 연결용)
    USE dnfp;
    
    -- Root 사용자 권한 설정 (Backend 연결용)
    -- Root 사용자가 모든 데이터베이스에 접근할 수 있도록 설정
    GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
    
    -- dfparty 사용자 생성 및 권한 설정
    -- 환경변수에서 비밀번호를 가져와서 사용자 생성
    -- MYSQL_PASSWORD 환경변수는 MariaDB 컨테이너에서 자동으로 처리됨
    
    -- dfparty 사용자에게 모든 권한 부여
    GRANT ALL PRIVILEGES ON dnfp.* TO 'dfparty'@'%';
    GRANT ALL PRIVILEGES ON dnfp_dev.* TO 'dfparty'@'%';
    GRANT ALL PRIVILEGES ON dnfp_prod.* TO 'dfparty'@'%';
    
    -- 권한 변경사항 적용
    FLUSH PRIVILEGES;
    
    -- 기본 테이블 생성 (필요시)
    -- CREATE TABLE IF NOT EXISTS users (
    --     id INT AUTO_INCREMENT PRIMARY KEY,
    --     username VARCHAR(50) NOT NULL UNIQUE,
    --     email VARCHAR(100) NOT NULL UNIQUE,
    --     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    -- );
    
    -- 초기 데이터 삽입 (필요시)
    -- INSERT INTO users (username, email) VALUES ('admin', 'admin@dfparty.com');
    
    -- 캐릭터 정보 테이블
    CREATE TABLE IF NOT EXISTS characters (
        id BIGINT AUTO_INCREMENT PRIMARY KEY,
        character_id VARCHAR(255) NOT NULL UNIQUE,
        character_name VARCHAR(255) NOT NULL,
        server_id VARCHAR(100) NOT NULL,
        job_id VARCHAR(100),
        job_grow_id VARCHAR(100),
        job_name VARCHAR(255),
        job_grow_name VARCHAR(255),
        level INTEGER,
        adventure_name VARCHAR(255),
        guild_name VARCHAR(255),
        
        -- 동적 정보 (주기적 업데이트 필요)
        fame BIGINT,
        dungeon_clear_nabel BOOLEAN DEFAULT FALSE,
        dungeon_clear_venus BOOLEAN DEFAULT FALSE,
        dungeon_clear_fog BOOLEAN DEFAULT FALSE,
        dungeon_clear_azure BOOLEAN DEFAULT FALSE,
        dungeon_clear_storm BOOLEAN DEFAULT FALSE,
        dungeon_clear_nightmare BOOLEAN DEFAULT FALSE,
        dungeon_clear_temple BOOLEAN DEFAULT FALSE,
        last_dungeon_check TIMESTAMP NULL,
        
        -- 실시간 정보 (매번 새로 조회)
        buff_power BIGINT,
        total_damage BIGINT,
        dundam_source TEXT,
        last_stats_update TIMESTAMP NULL,
        
        -- 메타 정보
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        is_excluded BOOLEAN DEFAULT FALSE,
        excluded_dungeons TEXT,
        is_favorite BOOLEAN DEFAULT FALSE
    );
    
    -- 모험단 정보 테이블
    CREATE TABLE IF NOT EXISTS adventures (
        id BIGINT AUTO_INCREMENT PRIMARY KEY,
        adventure_name VARCHAR(255) NOT NULL UNIQUE,
        server_id VARCHAR(100) NOT NULL UNIQUE,
        character_count INTEGER DEFAULT 0,
        total_fame BIGINT DEFAULT 0,
        average_level DOUBLE DEFAULT 0.0,
        last_activity TIMESTAMP NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
    
    -- 공유 파티 테이블
    CREATE TABLE IF NOT EXISTS shared_parties (
        id BIGINT AUTO_INCREMENT PRIMARY KEY,
        share_code VARCHAR(255) NOT NULL UNIQUE,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        dungeon_name VARCHAR(255) NOT NULL,
        party_size INTEGER NOT NULL,
        party_data TEXT NOT NULL,
        creator_name VARCHAR(255),
        tags TEXT,
        view_count INTEGER DEFAULT 0,
        is_active BOOLEAN NOT NULL DEFAULT TRUE,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        expires_at TIMESTAMP NULL
    );
    
    -- Mock API 데이터 테이블
    CREATE TABLE IF NOT EXISTS mock_api_data (
        id BIGINT AUTO_INCREMENT PRIMARY KEY,
        api_type VARCHAR(255) NOT NULL,
        endpoint VARCHAR(255) NOT NULL,
        request_method VARCHAR(255) NOT NULL,
        request_params TEXT,
        request_body TEXT,
        response_body TEXT,
        response_headers TEXT,
        response_status INTEGER NOT NULL,
        source VARCHAR(255) NOT NULL,
        access_count INTEGER NOT NULL DEFAULT 0,
        is_active BOOLEAN NOT NULL DEFAULT TRUE,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        last_accessed TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
    
    -- 인덱스 생성
    CREATE INDEX IF NOT EXISTS idx_character_name ON characters(character_name);
    CREATE INDEX IF NOT EXISTS idx_adventure_name ON characters(adventure_name);
    CREATE INDEX IF NOT EXISTS idx_server_id ON characters(server_id);
    CREATE INDEX IF NOT EXISTS idx_last_updated ON characters(updated_at);
    CREATE INDEX IF NOT EXISTS idx_last_dungeon_check ON characters(last_dungeon_check);
    CREATE INDEX IF NOT EXISTS idx_last_stats_update ON characters(last_stats_update);
    CREATE INDEX IF NOT EXISTS idx_fame ON characters(fame);
    CREATE INDEX IF NOT EXISTS idx_is_excluded ON characters(is_excluded);
    
    -- 모험단 인덱스
    CREATE INDEX IF NOT EXISTS idx_adventure_server ON adventures(server_id);
    CREATE INDEX IF NOT EXISTS idx_adventure_active ON adventures(is_active);
    CREATE INDEX IF NOT EXISTS idx_adventure_last_activity ON adventures(last_activity);
    
    -- 제약 조건 (MariaDB 11.8.3에서는 IF NOT EXISTS 지원하지 않음)
    -- ALTER TABLE characters ADD CONSTRAINT fk_characters_server
    --     FOREIGN KEY (server_id) REFERENCES adventures(server_id) ON DELETE CASCADE;
    
    -- 초기 데이터 삽입 (테스트용)
    INSERT INTO adventures (adventure_name, server_id, character_count, total_fame, average_level, is_active)
    VALUES ('테스트모험단', 'cain', 0, 0, 0.0, true)
    ON DUPLICATE KEY UPDATE adventure_name = adventure_name;
    
    -- 운영용 데이터베이스에도 동일한 스키마 적용
    USE dnfp_prod;
    
    -- 동일한 테이블 구조 생성 (운영용)
    -- ... (위와 동일한 CREATE TABLE 문들)
    
    -- 사용자 생성 및 권한 설정
    -- 환경변수에서 비밀번호를 가져와서 사용자 생성
    -- MYSQL_PASSWORD 환경변수는 MariaDB 컨테이너에서 자동으로 처리됨
    
    -- dfparty 사용자에게 모든 권한 부여
    GRANT ALL PRIVILEGES ON dnfp.* TO 'dfparty'@'%';
    GRANT ALL PRIVILEGES ON dnfp_dev.* TO 'dfparty'@'%';
    GRANT ALL PRIVILEGES ON dnfp_prod.* TO 'dfparty'@'%';
    FLUSH PRIVILEGES;
