# 2025년 8월 22일 작업 내용

## 1. 나벨 던전 버튼 레이아웃 개선
- **파일**: `df-party-frontend/src/views/DungeonStatus.vue`
- **변경 내용**: 
  - 기존: 4개 버튼이 한 줄에 나란히 배치
  - 변경: 2x2 그리드로 재구성 (첫 번째 줄: 하드+일반, 두 번째 줄: 매칭+안감)
  - 버튼 크기 축소: min-width 40px → 32px
  - 패딩 축소: 4px 8px → 2px 4px
  - 테두리 축소: 2px → 1px
  - 폰트 크기 축소: 11px → 10px
  - 간격 축소: gap 4px → 2px
  - 상단 여백 축소: margin-top 8px → 4px

## 2. 전체 최신화 버튼 개선
- **파일**: `df-party-frontend/src/views/DungeonStatus.vue`
- **변경 내용**:
  - 버튼에 "(던담 동기화 포함)" 서브타이틀 추가
  - CSS 스타일 개선: flexbox를 사용한 세로 정렬
  - 던담 동기화가 진행되는 동안 다른 던담 초기화 버튼들 비활성화
  - `isAnyCharacterSyncing()` 함수에 `refreshingAll.value` 조건 추가

## 3. deploy-application.ps1 스크립트 개선
- **파일**: `deploy-application.ps1`
- **변경 내용**:
  - `kubectl rollout restart` 대신 `kubectl scale` 방식으로 변경
  - 프론트엔드/백엔드 replicas를 0으로 만들고 10초 후 1로 복원
  - 새로운 파드가 완전히 준비될 때까지 대기하는 로직 추가
  - 최대 10번 시도하여 파드 상태 확인

## 작업 완료 상태
- ✅ 나벨 던전 버튼 레이아웃 개선 완료
- ✅ 전체 최신화 버튼 개선 완료  
- ✅ deploy-application.ps1 스크립트 개선 완료
- 📝 커밋 대신 오늘한일.txt에 작업 내용 기록

## 다음 작업 예정
- 사용자 테스트 및 피드백 반영
- 추가 UI/UX 개선사항 검토

## 4. 나벨 클리어 표시 개선
- **파일**: `df-party-frontend/src/views/DungeonStatus.vue`
- **변경 내용**:
  - "최대 4케릭" → "최대 4케릭(하드)"로 표시 변경
  - 하드 적격자만 4케릭 제한 적용, 일반 적격자는 제한 없음
  - `dungeonStats` 계산 로직 수정: 하드 적격자와 일반 적격자 구분 처리
  - 일반 클리어 표시 로직 개선: `dungeonStats.nabelNormal` 직접 계산

## 5. deploy-application.ps1 PowerShell 구문 오류 수정
- **파일**: `deploy-application.ps1`
- **변경 내용**:
  - PowerShell 변수 참조 구문 오류 수정: `$attempt/$maxAttempts` → `$attempt of $maxAttempts`
  - `:` 문자를 포함한 변수 참조 문제 해결: `:` → `-`로 변경
  - 배포 스크립트 실행 시 구문 오류 방지
  - 추가 수정: `Attempt $attempt of $maxAttempts: Checking` → `Attempt $attempt of $maxAttempts - Checking`

## 6. 나벨 클리어 현황 표시 개선
- **파일**: `df-party-frontend/src/views/DungeonStatus.vue`
- **변경 내용**:
  - "최대 4케릭(하드)" 제한 표시 제거
  - 일반 클리어 표시: `일반: X/Y(일반 선택한 개수 중 클리어 개수)`
  - 하드 클리어 표시: `하드: X/4(하드 선택한 개수 중 클리어 개수)`
  - 나벨 일반은 사실상 무제한이므로 선택된 캐릭터 수를 최대치로 표시
  - 하드는 4케릭 제한을 명확히 표시

## 7. 나벨 던전 통계 계산 로직 완전 분리
- **파일**: `df-party-frontend/src/views/DungeonStatus.vue`
- **변경 내용**:
  - 나벨 일반과 하드 통계를 완전히 독립적으로 계산
  - `nabelNormalCleared`: 일반 선택된 캐릭터 중 클리어한 개수
  - `nabelHardCleared`: 하드 선택된 캐릭터 중 클리어한 개수
  - `nabelNormal`: 일반 선택된 총 캐릭터 수
  - `nabelHard`: 하드 선택된 총 캐릭터 수 (4케릭 제한)
  - UI 표시: `일반: X/Y(일반 선택한 개수 중 클리어 개수)`, `하드: X/Y(하드 선택한 개수 중 클리어 개수)`

## 8. DFO API 타임라인 파싱 개선 - 줄바꿈 문제 해결
- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/service/DfoApiService.java`
- **변경 내용**:
  - DFO API에서 받아오는 `raidName`, `regionName`, `dungeonName`에 줄바꿈(`\n`) 포함 문제 해결
  - `replaceAll("\\s+", " ").trim()`을 사용하여 줄바꿈과 공백 정리
  - "이내 \n환혼전" → "이내 황혼전"으로 정상 처리
  - 타임라인에서 던전 클리어 상태 정확히 인식하도록 개선

## 9. DFO API 타임라인 파싱 코드 최적화
- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/service/DfoApiService.java`
- **변경 내용**:
  - `code == 201` (레이드 클리어)과 `code == 210` (레이드 선발대) 이벤트를 `||` 연산자로 통합 처리
  - 코드 중복 제거로 유지보수성 향상
  - 성능 향상: 하나의 if문으로 처리하여 불필요한 조건 검사 제거
  - 로그 메시지 개선: `"🎯 레이드 이벤트 발견: {raidName} (code: {code})"`로 통합
  - 이제 `code == 210`에서도 "이내 황혼전" 클리어 상태를 정확히 인식

## 10. 전체 최신화 비동기 처리 및 UI 개선
- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/service/CharacterService.java`
- **변경 내용**:
  - `refreshAdventureCharacters` 메서드를 `@Async`로 비동기 처리
  - `CompletableFuture<Map<String, Object>>` 반환 타입으로 변경
  - 30초 타임아웃 문제 해결: 백그라운드에서 처리하고 즉시 응답
  - `@EnableAsync` 어노테이션 추가

## 11. 개별 캐릭터 Refresh API 엔드포인트 추가
- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/controller/CharacterController.java`
- **변경 내용**:
  - 기존 `@GetMapping("/{serverId}/{characterId}/refresh")`를 `@PostMapping`으로 변경
  - 프론트엔드에서 호출하는 `/api/characters/{serverId}/{characterId}/refresh` 엔드포인트 지원
  - 개별 캐릭터 refresh 시 "POST method not supported" 에러 해결
  - 비동기 처리로 즉시 응답하고 백그라운드에서 던담 동기화 진행
  - `characterService.refreshCharacter(serverId, characterId)` 호출하여 기존 로직 재사용

- **파일**: `df-party-frontend/src/views/DungeonStatus.vue`
- **변경 내용**:
  - 던전 클리어 현황 표시 간소화
  - `일반: 0/8(일반 선택한 개수 중 클리어 개수)` → `일반: 0/8`
  - `하드: 0/4(하드 선택한 개수 중 클리어 개수)` → `하드: 0/4`
  - UI 가독성 향상

## 12. DungeonClearService 이내 황혼전 클리어 상태 처리 로직 수정
- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/service/DungeonClearService.java`
- **변경 내용**:
  - `analyzeDungeonClear` 메서드를 `DfoApiService`와 동일한 최신 로직으로 업데이트
  - 이내 황혼전 클리어 상태 처리 추가: `clearStatus.put("twilight", false)` 기본값 설정
  - DFO API 타임라인 파싱 로직 통일: `code == 201` (레이드 클리어), `code == 210` (레이드 선발대), `code == 209` (레기온 클리어)
  - 줄바꿈 및 공백 처리 로직 추가: `replaceAll("\\s+", " ").trim()`
  - "이내 황혼전" 클리어 상태가 캐릭터 검색 페이지와 던전 클리어 현황 페이지에서 일치하도록 수정
  - 문제 해결: 캐릭터 검색에서는 클리어로 표시되지만 던전 클리어 현황에서는 미클리어로 표시되는 불일치 현상 해결

## 13. 빌드 에러 수정 및 컴파일 문제 해결
- **파일**: `df-party-backend/build.gradle`
- **변경 내용**:
  - Spring Boot 버전을 3.2.1에서 3.3.0으로 업데이트하여 Gradle 8.5와의 호환성 문제 해결
  - Spring Boot Gradle 플러그인 버전 호환성 개선

- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/service/CharacterService.java`
- **변경 내용**:
  - `@EnableAsync` 어노테이션을 클래스에서 제거 (잘못된 위치)
  - `refreshAdventureCharacters` 메서드의 반환 타입을 `CompletableFuture<Map<String, Object>>`로 수정
  - `createErrorResponse` 호출을 `CompletableFuture.completedFuture()`로 감싸서 타입 불일치 해결

- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/controller/CharacterController.java`
- **변경 내용**:
  - 중복된 `refreshCharacter` 메서드 제거 (파일 끝에 있던 중복 메서드)
  - `@Slf4j` 어노테이션을 클래스에 추가하여 `log` 변수 인식 문제 해결
  - `setAdventureName` 호출을 `setAdventureForCharacter` 호출로 변경하여 엔티티 관계 설정 문제 해결

- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/entity/Character.java`
- **변경 내용**:
  - `setAdventureName` 메서드를 안전하지 않은 구현에서 주석 처리로 변경
  - Adventure 객체 생성 시 발생할 수 있는 문제 방지

- **결과**: 백엔드 빌드 성공, 컴파일 에러 모두 해결

## 14. 캐릭터 검색 페이지 진행바 개선 및 대기시간 단축
- **파일**: `df-party-frontend/src/views/CharacterSearch.vue`
- **변경 내용**:
  - 던담 동기화 진행바 대기시간을 30초에서 10초로 단축
  - HTML 템플릿의 카운트다운 타이머: `(20 - (syncProgress / 90 * 19))` → `(10 - (syncProgress / 90 * 9))`
  - JavaScript 로직의 `maxWaitTime`: 30000ms → 10000ms
  - 새로운 검색 시 이전 진행바 상태 완전 초기화 (isAutoSyncing, syncedCount, syncProgress, currentSyncingCharacter, isCompleted)
  - 진행바 완료 후 숨김 타이머를 3초에서 2초로 단축
  - 에러 발생 시에도 진행바 상태 완전 초기화
  - 검색 후 다른 캐릭터 검색 시 진행바가 제대로 표시되도록 상태 관리 개선
  - 진행바 표시 로직 개선으로 사용자 경험 향상

## 15. 캐릭터 검색 페이지 "남은 숙제" 명성컷 기반 표시 개선
- **파일**: `df-party-frontend/src/views/CharacterSearch.vue`
- **변경 내용**:
  - 던전 적격 여부 확인 메서드 추가: `isNabelEligible()`, `isTwilightEligible()`
  - 던전 상태 표시 메서드 `getDungeonStatus()` 추가: 명성컷 미달 시 "-" 표시
  - 명성컷 기준: 나벨/베누스/안개신 (47,684), 이내 황혼전 (72,688)
  - 명성컷 미달 던전은 O/X 대신 "-" 표시로 변경
  - CSS 스타일 추가: `.clear-status.ineligible` 클래스로 "-" 표시 스타일링 (회색, 일반 폰트)
  - 사용자가 명성컷을 확인하여 못가는 던전을 쉽게 구분할 수 있도록 개선

## 16. 캐릭터 검색 페이지 메시지 표시 위치 개선 및 SSE 연결 안정성 향상
- **파일**: `df-party-frontend/src/views/CharacterSearch.vue`
- **변경 내용**:
  - 에러 메시지와 성공 메시지를 검색 버튼 바로 아래로 이동
  - 새로운 `.message-area` 클래스 추가로 메시지 영역 스타일링 개선
  - 메시지 패딩 및 마진 조정으로 UI 일관성 향상
  - 메시지 표시 위치를 사용자가 더 쉽게 확인할 수 있도록 개선

- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/controller/SseController.java`
- **변경 내용**:
  - SSE 연결 타임아웃을 5분에서 2분으로 단축하여 안정성 향상
  - 하트비트 메커니즘 추가: 30초마다 연결 상태 확인 및 "ping" 이벤트 전송
  - Broken pipe 오류 감지 및 로깅 개선
  - SSE 연결 오류 분석: Broken pipe, ERR_INCOMPLETE_CHUNKED_ENCODING 등 네트워크 오류 처리 강화
  - 연결 지속 시간 모니터링 및 안정적인 재연결 메커니즘 구현
  - 하트비트 전송 실패 시 에미터 정리 및 클라이언트 목록에서 제거하는 로직 추가
  - Broken pipe 발생 시 정상적인 연결 해제로 인식하여 우아하게 처리

- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/exception/GlobalExceptionHandler.java`
- **변경 내용**:
  - SSE 연결 관련 `IOException`을 별도로 처리하는 메서드 추가
  - `Broken pipe` 오류를 정상적인 클라이언트 연결 해제로 인식
  - SSE 연결 오류 시 `HttpMessageNotWritableException` 방지
  - SSE 관련 요청(`/api/sse/`)에서 발생하는 네트워크 오류를 정상 응답으로 처리
  - 일반적인 `IOException`과 SSE 관련 `IOException`을 구분하여 처리

## 17. 던전별 정확한 명성컷 적용 및 "명성 부족" 표시 개선
- **파일**: `df-party-frontend/src/views/CharacterSearch.vue`
- **변경 내용**:
  - 던전별 정확한 명성컷 기준 설정: 나벨(47,684), 베누스(41,929), 안개신(30,135), 이내 황혼전(72,688)
  - 각 던전별 적격 여부 확인 메서드 추가: `isVenusEligible()`, `isFogEligible()`
  - 명성컷 미달 시 "-" 대신 "명성 부족" 표시로 변경
  - 베누스와 안개신 던전의 적격 여부 확인 로직 수정 (기존 나벨 기준에서 각각의 기준으로 변경)
  - CSS 스타일 개선: "명성 부족" 표시에 대한 폰트 크기 조정

- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/service/CharacterService.java`
- **변경 내용**:
  - 베누스와 안개신 적격 여부 확인 메서드 추가: `isVenusEligible()`, `isFogEligible()`
  - 던담 동기화 후 모든 던전 적격 여부 자동 업데이트 로직 추가
  - 로그 메시지 개선: 베누스와 안개신 적격 여부 정보 포함

- **파일**: `df-party-backend/src/main/java/com/dfparty/backend/entity/Character.java`
- **변경 내용**:
  - 베누스와 안개신 적격 여부 필드 추가: `isVenusEligible`, `isFogEligible`
  - 해당 필드에 대한 getter/setter 메서드 추가
  - 데이터베이스 스키마 확장으로 던전별 적격 여부 추적 가능

## 18. Helm Infrastructure DB Init 스크립트 업데이트 및 명성 부족 표시 개선
- **파일**: `helm-charts-infrastructure/mariadb/templates/init-configmap.yaml`
- **변경 내용**:
  - `characters` 테이블 생성 스크립트에 새로운 컬럼 추가: `is_venus_eligible`, `is_fog_eligible`
  - 향후 새로운 환경 배포 시 자동으로 필요한 컬럼들이 생성되도록 스크립트 업데이트
  - 데이터베이스 스키마 일관성 유지

- **파일**: `df-party-frontend/src/views/CharacterSearch.vue`
- **변경 내용**:
  - "명성 부족" 텍스트 색상을 회색(#999)에서 빨간색(#f44336)으로 변경
  - "명성 부족" 표시가 "X"와 동일한 빨간색으로 표시되어 시각적 일관성 향상
  - CSS 클래스 `.clear-status.ineligible` 색상 변경

- **파일**: `df-party-frontend/src/views/DungeonStatus.vue`
- **변경 내용**:
  - "스펙 부족" 텍스트를 "명성 부족"으로 변경하여 용어 통일성 향상
  - 던전별 정확한 명성컷 기준을 적용한 적격 여부 확인 함수들 추가: `isNabelEligible()`, `isVenusEligible()`, `isFogEligible()`, `isTwilightEligible()`
  - 이내 황혼전 표시 로직을 `CharacterSearch.vue`와 동일하게 수정: `character.isTwilightEligible` → `isTwilightEligible(character)`
  - 던전 클리어 현황 페이지와 캐릭터 검색 페이지 간의 이내 황혼전 클리어 상태 표시 일치성 확보
  - 명성컷 기준: 나벨(47,684), 베누스(41,929), 안개신(30,135), 이내 황혼전(72,688)

## 19. 파티 구성 기능 개선 (자동 파티 생성 로직 및 모험단 중복 방지)
- **작업 내용**:
  1.  **파티별 모험단 중복 방지 기능 구현**:
      - 각 파티에 캐릭터를 드래그하여 추가할 때, 해당 파티에 이미 같은 모험단 소속의 캐릭터가 있다면 추가되지 않도록 하는 기능 구현.
  2.  **자동 파티 생성 기능 구현 (Basic 방식)**:
      - 현재 등록된 모험단들의 캐릭터들을 사용하여 파티를 자동으로 구성.
      - **파티 구성 원칙**: 한 파티에 버퍼 1명, 딜러 3명.
      - **단계별 로직**:
          a.  **리스트 생성**: 모든 캐릭터 중 가장 강한 딜러 순서의 리스트와 가장 강한 버퍼 순서의 리스트를 생성.
          b.  **파티 구성 반복**: 딜러 및 버퍼 리스트에서 더 이상 캐릭터를 뽑아낼 수 없을 때까지 다음 과정을 반복하여 여러 파티를 구성.
              i.  **딜러 추가 (1)**: 딜러 리스트에서 가장 강한 딜러 1명을 파티에 추가.
              ii. **딜러 추가 (2, 3)**: 딜러 리스트의 **반대 방향 (약한 순)**에서 캐릭터를 하나씩 뽑아 모험단 중복을 체크.
                  -   같은 모험단이 파티에 없으면 추가.
                  -   같은 모험단이 이미 있으면 다음 캐릭터를 체크.
                  -   이 과정을 반복하여 딜러 3명이 될 때까지 처리.
              iii. **버퍼 추가 (1)**: 버퍼 리스트에서 **역순 (약한 순)**으로 캐릭터를 하나씩 뽑아 모험단 중복을 체크.
                  -   같은 모험단이 파티에 없으면 추가.
                  -   같은 모험단이 이미 있으면 다음 버퍼를 체크.
                  -   이 과정을 반복하여 버퍼 1명이 될 때까지 처리.
      - **결과**: 구성된 파티들을 화면에 표시.
